#lang racket

;; applicative vs normal order test
;; In which order are the functions evaluated?
;; Applicative order:
;;   evalulate the inner most expression and pass down the result as an argument.
;;   Prevents having to evaluate the same expression multiple times
;; Normal order:
;;   Expand all nested proceedure calls before evaulating. Might cause the same
;;   expression multiple times

(define (p) (p)) ;; recursive function without a base case, runs forever

(define (test x y)
  (if (= x 0) 0 y))

;; Running this test on a applicative order interpreter results in an eternal loop
;; since p calls itself.
(test 0 (p))
;; Normal order will not evaluate a function until needed, so the test will terminate since
;; the first parameter is zero, and the if-check will return zero as well