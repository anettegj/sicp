#lang racket

;; Exercise 1.6. Alyssa P. Hacker doesn’t see why if needs to be provided as a special form. ‘‘Why
;; can’t I just define it as an ordinary procedure in terms of cond?’’ she asks. Alyssa’s friend Eva Lu
;; Ator claims this can indeed be done, and she defines a new version of if:
(define (new-if predicate then-clause else-clause)
 (cond (predicate then-clause)
 (else else-clause)))

;; Newtons method to calculate the square root
(define (square x) (* x x))

(define (sqrt-iter guess x)
 (if (good-enough? guess x)
 ;; (new-if (good-enough? guess x) ;; This doesn't work
          guess
          (sqrt-iter (improve guess x) x)
          )
  )

(define (improve guess x)
 (average guess (/ x guess)))

(define (average x y)
 (/ (+ x y) 2))
(define (good-enough? guess x)
 (< (abs (- (square guess) x)) 0.001))

(define (sqrt x)
 (sqrt-iter 1.0 x))

;; The built in if-statement is a special form and is not executed the
;; same way as a user-defined function. 
;; 
;; As a user-defined function the parameters of new-if will be evaluated
;; and passed in to the method. So both the then-clause and the else-clause
;; will be evaluated. The else-clause is the sqrt-iter expression which calls
;; itself, calling new-if again thus leading into an eternal loop.

(sqrt 16) ;; using the new-if method in sqrt-iter will turn this call into an eternal loop
;; The call below will terminate as expected. It is not the new-if that is a
;; problem in itself, it's using it in a recursive manner that causes the issue.
(new-if (good-enough? 1 4) false true) 
